{"version":3,"sources":["reducer.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["usePersistedReducer","createPersistedReducer","initialState","apiKey","apiSet","origin","destination","drawPolygon","drawPolyline","drawCircle","points","color","mapReducer","state","action","type","status","loadKey","LoadingContainer","props","GoogleApiWrapper","mapStyle","featureType","elementType","stylers","useState","lat","lng","mapCenter","path","setPath","opacity","setOpacity","stroke","setStroke","setColor","message","setMessage","setDrawPolygon","setDrawPolyline","setDestination","setOrigin","themap","setTheMap","renderPolygon","polygon","google","maps","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","editable","zIndex","addListener","event","console","log","vertices","getPath","i","getLength","xy","getAt","coord","push","setMap","renderPolyline","Polyline","geodesic","style","initialCenter","zoom","disableDefaultUI","className","width","height","onReady","mapProps","map","setOptions","styles","_mapLoaded","onClick","clickEvent","latLng","newPoint","title","position","draggable","onDragend","t","pin","index","$","fadeOut","placeholder","onChange","target","value","for","id","name","min","max","length","css","display","setTimeout","DirectionsService","route","LatLng","travelMode","TravelMode","DRIVING","result","DirectionsStatus","OK","startpoint","routes","legs","start_address","endpoint","end_address","duration","text","distance","pathPoints","overview_path","polyline","error","window","location","reload","top","App","dispatch","key","setKey","useEffect","filter","Map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9024980c.chunk.js","sourcesContent":["\r\nimport createPersistedReducer from 'use-persisted-reducer';\r\n\r\nconst usePersistedReducer = createPersistedReducer('0yah-google-maps');\r\n\r\nconst directionsURL = 'https://maps.googleapis.com/maps/api/directions/';\r\nconst initialState = {\r\n    apiKey: null,\r\n    apiSet:false,\r\n    origin: {},\r\n    destination: {},\r\n    drawPolygon: false,\r\n    drawPolyline: false,\r\n    drawCircle: false,\r\n    points: [],\r\n    color: null,\r\n\r\n\r\n}\r\n\r\n\r\nconst mapReducer = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'LOAD_API_KEY':\r\n            return {\r\n                ...state,\r\n                apiKey: action.apiKey,\r\n                apiSet:action.apiSet,\r\n\r\n            };\r\n\r\n        case 'DRAW_POLYGON':\r\n            return {\r\n                ...state,\r\n                drawPolygon: action.status\r\n\r\n            };\r\n\r\n        case 'DRAW_POLYLINE':\r\n            return {\r\n                ...state,\r\n                drawPolyline: action.status\r\n\r\n            };\r\n\r\n        case 'DRAW_CIRCLE':\r\n            return {\r\n                ...state,\r\n                drawCircle: action.status\r\n\r\n            };\r\n\r\n\r\n        case 'LOAD_ORIGIN':\r\n            return {\r\n                ...state,\r\n                origin: action.origin\r\n\r\n            };\r\n\r\n\r\n        case 'LOAD_DESTINATION':\r\n            return {\r\n                ...state,\r\n                destination: action.destination\r\n\r\n            };\r\n\r\n        case 'LOAD_POINTS':\r\n            return {\r\n                ...state,\r\n                points: action.points\r\n\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nconst drawPolygon = (status) => {\r\n    return {\r\n        type: 'DRAW_POLYGON',\r\n        status: status\r\n    };\r\n}\r\n\r\nconst drawPolyline = (status) => {\r\n    return {\r\n        type: 'DRAW_POLYLINE',\r\n        status: status\r\n    };\r\n}\r\n\r\nconst drawCircle = (status) => {\r\n    return {\r\n        type: 'DRAW_CIRCLE',\r\n        status: status\r\n    };\r\n}\r\n\r\nconst loadOrigin = (origin) => {\r\n    return {\r\n        type: 'LOAD_ORIGIN',\r\n        origin: origin\r\n    };\r\n}\r\n\r\n\r\nconst loadDestination = (destination) => {\r\n    return {\r\n        type: 'LOAD_DESTINATION',\r\n        destination: destination\r\n    };\r\n}\r\n\r\n\r\nconst loadKey = (apiKey,apiSet) => {\r\n    return {\r\n        type: 'LOAD_API_KEY',\r\n        apiKey: apiKey,\r\n        apiSet:apiSet\r\n    };\r\n}\r\n\r\nconst loadPoints = (points) => {\r\n    return {\r\n        type: 'LOAD_POINTS',\r\n        points: points\r\n    };\r\n}\r\n\r\n\r\nexport {loadDestination,loadKey,loadOrigin,loadPoints,drawCircle,drawPolygon,drawPolyline,mapReducer,usePersistedReducer,initialState,directionsURL};","\r\nimport { useState, useReducer, useEffect } from 'react';\r\nimport { Map, Marker, Polyline, GoogleApiWrapper, Polygon } from 'google-maps-react';\r\nimport $, { event } from 'jquery';\r\n\r\nimport { usePersistedReducer, mapReducer, initialState, loadDestination, loadOrigin, loadPoints, loadKey } from \"./reducer\";\r\n\r\n\r\nconst LoadingContainer = (props) => (\r\n    <div>Fancy loading!</div>\r\n)\r\n\r\n\r\nconst onMarkerClick = (props, marker) => {\r\n    this.setState({\r\n        activeMarker: marker,\r\n        selectedPlace: props,\r\n        showingInfoWindow: true\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\nfunction MapContainer(props) {\r\n\r\n    const mapStyle = [\r\n        {\r\n            featureType: \"road.arterial\",\r\n            elementType: \"geometry\",\r\n            stylers: [\r\n                { \"color\": \"#CCFFFF\" }\r\n            ]\r\n        }, {\r\n            featureType: \"poi\",\r\n            elementType: \"labels\",\r\n            stylers: [\r\n                { \"visibility\": \"off\" }\r\n            ]\r\n        }, {\r\n            featureType: \"transit\",\r\n            elementType: \"labels\",\r\n            stylers: [\r\n                { \"visibility\": \"off\" }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    const [state, dispatch] = usePersistedReducer(mapReducer, initialState);\r\n\r\n    const [mapCenter, setMapCenter] = useState({\r\n        lat: -1.3097762253207629,\r\n        lng: 36.81468703330993\r\n    });\r\n    const [path, setPath] = useState([]);\r\n    const [opacity, setOpacity] = useState(1);\r\n    const [stroke, setStroke] = useState(1);\r\n\r\n    const [color, setColor] = useState('');\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const [drawPolygon, setDrawPolygon] = useState(false);\r\n    const [drawPolyline, setDrawPolyline] = useState(false);\r\n\r\n    const [destination, setDestination] = useState(mapCenter);\r\n    const [origin, setOrigin] = useState(mapCenter);\r\n    const [themap, setTheMap] = useState();\r\n\r\n\r\n\r\n    \r\n\r\n    function _mapLoaded(mapProps, map) {\r\n        map.setOptions({\r\n            styles: mapStyle\r\n        });\r\n        setTheMap(map);\r\n\r\n        //var res = decodePolyline('a~l~Fjk~uOwHJy@P');\r\n        //console.log(res);\r\n\r\n        //console.log(props);\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onMapClicked = (mapProps, map, clickEvent) => {\r\n        var points = path;\r\n\r\n        var latLng = clickEvent.latLng;\r\n        const lat = latLng.lat();\r\n        const lng = latLng.lng();\r\n        var newPoint = { lat, lng }\r\n        console.log(map);\r\n        points.push(newPoint);\r\n        setPath(points);\r\n        if (drawPolygon) {\r\n            renderPolygon(map);\r\n\r\n        } else if (drawPolyline) {\r\n            renderPolyline(map);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    const renderPolygon = () => {\r\n        //  console.log(map);\r\n\r\n\r\n        //Set the polygon to editable else the map will draw a new polygon\r\n        const polygon = new props.google.maps.Polygon({\r\n            paths: path,\r\n            strokeColor: color,\r\n            strokeOpacity: opacity,\r\n            strokeWeight: stroke,\r\n            fillColor: color,\r\n            fillOpacity: opacity,\r\n            //draggable: true,\r\n            //geodesic: true,\r\n            editable: true,\r\n            zIndex: 5,\r\n        });\r\n\r\n\r\n        polygon.addListener(\"click\", (event) => {\r\n            console.log(polygon);\r\n            const vertices = polygon.getPath();\r\n            var points = [];\r\n\r\n            // Iterate over the vertices.\r\n            for (let i = 0; i < vertices.getLength(); i++) {\r\n                const xy = vertices.getAt(i);\r\n\r\n                var coord = {\r\n                    lat: xy.lat(),\r\n                    lng: xy.lng()\r\n                }\r\n                points.push(coord);\r\n\r\n            }\r\n            console.log(points);\r\n            setPath(points);\r\n\r\n        });\r\n\r\n\r\n\r\n\r\n        polygon.setMap(themap);\r\n\r\n\r\n    }\r\n\r\n\r\n    const renderPolyline = () => {\r\n        const polyline = new props.google.maps.Polyline({\r\n            path: path,\r\n            geodesic: false,\r\n            strokeColor: color,\r\n            strokeOpacity: opacity,\r\n            strokeWeight: stroke,\r\n            fillColor: color,\r\n            fillOpacity: opacity,\r\n            editable: true,\r\n        });\r\n    \r\n        polyline.setMap(themap);\r\n        //console.log(polyline);\r\n\r\n    }\r\n\r\n\r\n    function decodePolyline(encoded) {\r\n        if (!encoded) {\r\n            return [];\r\n        }\r\n        var poly = [];\r\n        var index = 0, len = encoded.length;\r\n        var lat = 0, lng = 0;\r\n\r\n        while (index < len) {\r\n            var b, shift = 0, result = 0;\r\n\r\n            do {\r\n                b = encoded.charCodeAt(index++) - 63;\r\n                result = result | ((b & 0x1f) << shift);\r\n                shift += 5;\r\n            } while (b >= 0x20);\r\n\r\n            var dlat = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);\r\n            lat += dlat;\r\n\r\n            shift = 0;\r\n            result = 0;\r\n\r\n            do {\r\n                b = encoded.charCodeAt(index++) - 63;\r\n                result = result | ((b & 0x1f) << shift);\r\n                shift += 5;\r\n            } while (b >= 0x20);\r\n\r\n            var dlng = (result & 1) != 0 ? ~(result >> 1) : (result >> 1);\r\n            lng += dlng;\r\n\r\n            var p = {\r\n                lat: lat / 1e5,\r\n                lng: lng / 1e5,\r\n            };\r\n            poly.push(p);\r\n        }\r\n        return poly;\r\n    }\r\n\r\n    const getRoute = () => {\r\n        // console.log(map);\r\n        console.log(props.google.maps.DirectionsService)\r\n\r\n        var destinationN = `${destination.lat},${destination.lng}`;\r\n\r\n        var originN = `${origin.lat},${origin.lng}`;\r\n\r\n        const DirectionsService = new props.google.maps.DirectionsService();\r\n\r\n        DirectionsService.route(\r\n            {//-1.307094715669858,36.81960084022521\r\n                origin: new props.google.maps.LatLng(origin.lat, origin.lng),\r\n                destination: new props.google.maps.LatLng(destination.lat, destination.lng),\r\n                travelMode: props.google.maps.TravelMode.DRIVING\r\n            },\r\n            (result, status) => {\r\n                if (status === props.google.maps.DirectionsStatus.OK) {\r\n                    //console.log(result);\r\n                    var startpoint = result.routes[0].legs[0].start_address;\r\n                    var endpoint = result.routes[0].legs[0].end_address;\r\n                    var duration = result.routes[0].legs[0].duration.text;\r\n                    var distance = result.routes[0].legs[0].distance.text;\r\n                    //console.log(result.routes[0].legs[0]); \r\n                   // var coord = decodePolyline(result.routes[0].overview_polyline);\r\n                    var pathPoints = [];\r\n                    result.routes[0].overview_path.map((path) => {\r\n\r\n                        const lat = path.lat();\r\n                        const lng = path.lng();\r\n                        var pin = {\r\n                            lat,\r\n                            lng\r\n                        }\r\n                        pathPoints.push(pin);\r\n                    });\r\n                    setPath(pathPoints);\r\n                    //console.log(pathPoints)\r\n\r\n                    const polyline = new props.google.maps.Polyline({\r\n                        path: pathPoints,\r\n                        geodesic: false,\r\n                        strokeColor: color,\r\n                        strokeOpacity: 1.0,\r\n                        strokeWeight: 2,\r\n                        editable: true,\r\n                    });\r\n\r\n                    setMessage(`It will take ${duration} to drive from ${startpoint} to ${endpoint}, The total distance is ${distance}.`);\r\n                    setTimeout(()=>{\r\n                        setMessage('');                       \r\n                    },180000);\r\n\r\n                    polyline.setMap(themap);\r\n\r\n                    // console.log(coord);\r\n                } else {\r\n\r\n                    setMessage(`Could not fetch route`);\r\n                    setTimeout(()=>{\r\n                        setMessage('');                       \r\n                    },18000);\r\n                    console.error(`error fetching directions ${result}`);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return <div style={props.style}>\r\n        <Map google={props.google}\r\n            initialCenter={mapCenter}\r\n            zoom={16}\r\n            disableDefaultUI\r\n\r\n            className='map'\r\n            style={{\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n            onReady={(mapProps, map) => _mapLoaded(mapProps, map)}\r\n\r\n            onClick={onMapClicked}\r\n        >\r\n\r\n\r\n            <Marker\r\n                title={'Destination'}\r\n                position={destination}\r\n\r\n                draggable\r\n\r\n                onDragend={(event) => {\r\n                    console.log(event);\r\n                }}\r\n\r\n                onClick={(t, map, coord) => {\r\n\r\n                    const { latLng } = coord;\r\n                    const lat = latLng.lat();\r\n                    const lng = latLng.lng();\r\n                    var pin = {\r\n                        lat,\r\n                        lng\r\n                    }\r\n                    setDestination(pin);\r\n\r\n                    setMessage('End point has been saved successfully');\r\n                   \r\n                    console.log(pin);\r\n\r\n\r\n                }}\r\n            />\r\n\r\n\r\n            <Marker\r\n                title={'Origin'}\r\n                draggable\r\n                onDragend={(event) => {\r\n\r\n                }}\r\n\r\n                position={origin}\r\n\r\n                onClick={(t, map, coord) => {\r\n\r\n                    const { latLng } = coord;\r\n                    const lat = latLng.lat();\r\n                    const lng = latLng.lng();\r\n                    var pin = {\r\n                        lat,\r\n                        lng\r\n                    }\r\n\r\n                    setOrigin(pin);\r\n                    setMessage('Start point has been saved successfully');\r\n                    \r\n\r\n\r\n                    console.log(pin);\r\n\r\n\r\n                }}\r\n\r\n            />\r\n        </Map>\r\n\r\n        <div className='messageModal'>\r\n            {message}\r\n        </div>\r\n\r\n        <div className='coordinates'>\r\n            <span className='title'>\r\n                Coordinates\r\n            </span>\r\n            <div className='content'>\r\n            {\r\n    path.map((coord,index)=>{\r\n        return <span>{`{latitude:${coord.lat},longitude:${coord.lat}}`}</span>\r\n    })\r\n}\r\n            </div>\r\n            <span className='controls' onClick={()=>{\r\n                $('.coordinates').fadeOut();\r\n                \r\n            }}> \r\n       \r\nDone\r\n            </span>\r\n        \r\n\r\n        </div>\r\n\r\n        <div className=\"controls\">\r\n            <input placeholder=\"Colour\" type=\"color\" onChange={(event) => {\r\n                console.log(event.target.value);\r\n                setColor(event.target.value);\r\n            }} />\r\n\r\n\r\n\r\n            <div>\r\n                <label for=\"opacity\">Opacity:</label>\r\n                <input type=\"range\" id=\"opacity\" name=\"vol\" min=\"10\" max=\"100\" onChange={(event) => {\r\n                    var stroke = (event.target.value) / 100;\r\n                    console.log(stroke);\r\n                    setOpacity(stroke);\r\n                }} />\r\n            </div>\r\n            <div>\r\n                <label for=\"stroke\">Stroke :</label>\r\n                <input type=\"range\" id=\"stroke\" name=\"vol\" min=\"10\" max=\"1000\" onChange={(event) => {\r\n                    var stroke = (event.target.value) / 100;\r\n                    console.log(stroke);\r\n                    setStroke(stroke);\r\n                }} />\r\n            </div>\r\n\r\n\r\n\r\n            <span onClick={() => {\r\n                if (path.length>0) {\r\n                    $('.coordinates').css({\r\n                        display:'flex'\r\n                    });\r\n                    \r\n                }else{\r\n                    setMessage('You may draw a polygon/polyine or set a starting point and ending point to find the pathway.');\r\n                    setTimeout(()=>{\r\n                        setMessage('');\r\n                    },10000);\r\n                }\r\n\r\n            }}>\r\n                Show Coordinates\r\n            </span>\r\n\r\n\r\n\r\n            <span onClick={() => {\r\n                if (origin == mapCenter) {\r\n                    console.log('Origin has not been set');\r\n                    setMessage('Drag the marker to the startpoint then click it to save');\r\n                    setTimeout(()=>{\r\n                        setMessage('');\r\n                       \r\n                    },10000);\r\n                    return\r\n                } else if (destination == mapCenter) {\r\n                    console.log('Destination has not been set')\r\n                    setMessage('Drag the marker to the endpoint then click it to save');\r\n                    setTimeout(()=>{\r\n                        setMessage('');                       \r\n                    },10000);\r\n                    return\r\n                } else {\r\n                    getRoute();\r\n                }\r\n            }}>\r\n                Find Route\r\n            </span>\r\n            <span onClick={() => {\r\n                setPath([]);\r\n                setDrawPolygon(!drawPolyline);\r\n                setMessage('Press two different Points on the map then adjust')\r\n                setTimeout(()=>{\r\n                    setMessage('');\r\n                   \r\n                },10000);\r\n           \r\n           }}>\r\n                Draw Polygon\r\n            </span>\r\n\r\n            <span onClick={() => {\r\n                setPath([]);\r\n                setMessage('Press two different Points on the map then adjust');\r\n                setDrawPolyline(!drawPolyline);\r\n\r\n                setTimeout(()=>{\r\n                    setMessage('');\r\n                   \r\n                },10000);\r\n\r\n                if(!drawPolyline){\r\n\r\n                }\r\n            }}>\r\n                Draw Polyline\r\n            </span>\r\n\r\n            <span onClick={() => {\r\n        \r\n            window.location.reload();\r\n            }}>\r\n                Refresh Map\r\n            </span>\r\n\r\n\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\n\r\nexport default GoogleApiWrapper(\r\n    (props) => ({\r\n\r\n        apiKey: (props.apiKey),\r\n        LoadingContainer: LoadingContainer\r\n    }\r\n    ))(MapContainer);\r\n\r\n","\nimport './App.css';\nimport Map from './Map';\nimport $, { event } from 'jquery';\n\nimport { useState, useReducer, useEffect } from 'react';\nimport { usePersistedReducer, mapReducer, initialState, loadDestination, loadOrigin, loadPoints, loadKey } from \"./reducer\";\n\nvar mapStyle = {\n  position: 'absolute',\n  height: '100%',\n  width: '100%',\n  top: 0,\n  zIndex: '0',\n\n\n}\n\n//\nconst App = () => {\n\n\n  const [state, dispatch] = usePersistedReducer(mapReducer, initialState);\n\n  const [key, setKey] = useState(state.apiKey);\n\n  useEffect(() => {\n    \n    console.log(state);\n    if(state.apiKey != null && state.apiSet){\n      $('.myMap').css({\n        filter:'blur(0px)'\n      });\n\n      $('.myApiKey').fadeOut();\n    }\n  }, []);\n  return (\n    <div >\n\n      <div className=\"layout\">\n\n      <div className='delete' onClick={() => {\n                dispatch(loadKey(null,false));\n                window.location.reload();\n\n                }}>\n                Delete API Key\n      </div>\n        <div className=\"myMap\">\n          <Map style={mapStyle} apiKey={key} />\n\n        </div>\n\n    <div className='myApiKey'>\n      <input placeholder=\"Your Google API Key...\" value={key} type='password' onChange={(event)=>{\n          console.log(event.target.value);\n\n          setKey(event.target.value);\n\n      }}/>\n      <span className=\"accept\" onClick={()=>{\n        if(key !='' || key != null){\n          dispatch(loadKey(key,true));\n          window.location.reload();\n        }\n\n      }}>\n        Proceed\n      </span>\n      <ul>\n        <li>Enable Directions API</li>\n        <li>Enable Distance Matrix API</li>\n        <li>Enable Maps Javascript API</li>\n      </ul>\n\n      <span className='info'>\n        If the key is wrong the map will not be displayed.\n        The API Key will be stored in your browser for future visits. To delete it,clear this site's data and cookies \n      </span>\n\n    </div>\n\n\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}