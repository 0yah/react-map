[{"C:\\Users\\ian\\Documents\\react-map\\src\\index.js":"1","C:\\Users\\ian\\Documents\\react-map\\src\\reportWebVitals.js":"2","C:\\Users\\ian\\Documents\\react-map\\src\\App.js":"3","C:\\Users\\ian\\Documents\\react-map\\src\\Map.js":"4","C:\\Users\\ian\\Documents\\react-map\\src\\key.js":"5"},{"size":500,"mtime":1607249202858,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1607249202858,"results":"8","hashOfConfig":"7"},{"size":506,"mtime":1609431644916,"results":"9","hashOfConfig":"7"},{"size":6005,"mtime":1609446542116,"results":"10","hashOfConfig":"7"},{"size":81,"mtime":1609432413346,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ofuxmb",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ian\\Documents\\react-map\\src\\index.js",[],"C:\\Users\\ian\\Documents\\react-map\\src\\reportWebVitals.js",[],"C:\\Users\\ian\\Documents\\react-map\\src\\App.js",[],"C:\\Users\\ian\\Documents\\react-map\\src\\Map.js",["23","24","25","26","27","28","29","30","31","32"],"\r\nimport { useState, useReducer, useEffect } from 'react';\r\nimport { Map, Marker, Polyline, GoogleApiWrapper, Polygon } from 'google-maps-react';\r\nimport $ from 'jquery';\r\nimport {GOOGLE_MAPS_API_KEY} from './key';\r\n\r\nvar madaraka = [\r\n\r\n  { lat: -1.3108257554920004, lng: 36.808661626017184 },\r\n  { lat: -1.312830413899208, lng: 36.80865149910935 },\r\n  { lat: -1.3134144278614805, lng: 36.80951547137628 },\r\n  { lat: -1.313741017319574, lng: 36.810400901315326 },\r\n  { lat: -1.313741017319574, lng: 36.810400901315326 },\r\n  { lat: -1.3140708422858967, lng: 36.81108218240511 },\r\n  { lat: -1.315093835705163, lng: 36.811058042523975 },\r\n  { lat: -1.315093835705163, lng: 36.811058042523975 },\r\n  { lat: -1.316189899617654, lng: 36.81245681452524 },\r\n  { lat: -1.315692145882217, lng: 36.81297381031286 },\r\n  { lat: -1.3151729400281267, lng: 36.81329768705141 },\r\n  { lat: -1.315301938160239, lng: 36.814162010096226 },\r\n  { lat: -1.314615759497946, lng: 36.814640095042854 },\r\n  { lat: -1.3139727707259168, lng: 36.81490961942835 },\r\n  { lat: -1.313072929389837, lng: 36.815491583543526 },\r\n  { lat: -1.3129465053140499, lng: 36.81622635833154 },\r\n  { lat: -1.3136341145297643, lng: 36.817725637929854 },\r\n  { lat: -1.3128409612332947, lng: 36.81837871820443 },\r\n  { lat: -1.3113717821170303, lng: 36.818276104899375 },\r\n  { lat: -1.3102161240498096, lng: 36.819698844441156 },\r\n  { lat: -1.3084169032109834, lng: 36.81957663159036 },\r\n  { lat: -1.3069851196480087, lng: 36.82012613975713 },\r\n  { lat: -1.3063105228137488, lng: 36.81902904102898 },\r\n  { lat: -1.3058016075368912, lng: 36.817536354091686 },\r\n  { lat: -1.3051639795293342, lng: 36.81612949784287 },\r\n  { lat: -1.3054692786555377, lng: 36.814992090738485 },\r\n  { lat: -1.3060080659974753, lng: 36.814037149088136 },\r\n  { lat: -1.3064490763844678, lng: 36.81321635550907 },\r\n  { lat: -1.3069055545531518, lng: 36.81239826294925 },\r\n  { lat: -1.307598005577994, lng: 36.81102227091438 },\r\n  { lat: -1.3092683919278465, lng: 36.809803577934886 },\r\n];\r\n\r\n/*\r\n\r\n\r\n#Polygon_0\r\n\r\n\r\n*/\r\n\r\n\r\nvar everythingElse = [\r\n\r\n  { lat: 0, lng: 180 },\r\n  { lat: 180, lng: 0 },\r\n\r\n  { lat: 0, lng: -180 },\r\n  { lat: -180, lng: 0 },\r\n];\r\nconst mapStyle = [\r\n  {\r\n    featureType: \"road.arterial\",\r\n    elementType: \"geometry\",\r\n    stylers: [\r\n      { \"color\": \"#CCFFFF\" }\r\n    ]\r\n  }, {\r\n    featureType: \"poi\",\r\n    elementType: \"labels\",\r\n    stylers: [\r\n      { \"visibility\": \"on\" }\r\n    ]\r\n  }, {\r\n    featureType: \"transit\",\r\n    elementType: \"labels\",\r\n    stylers: [\r\n      { \"visibility\": \"off\" }\r\n    ]\r\n  }\r\n]\r\n\r\nconst LoadingContainer = (props) => (\r\n  <div>Fancy loading!</div>\r\n)\r\n\r\n\r\nconst onMarkerClick = (props, marker) => {\r\n  this.setState({\r\n    activeMarker: marker,\r\n    selectedPlace: props,\r\n    showingInfoWindow: true\r\n  });\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction MapContainer(props) {\r\n\r\n    const [path, setPath] = useState([]);\r\n\r\n\r\n    const [pin, setPin] = useState([{\r\n        lat: -1.3097762253207629,\r\n        lng: 36.81468703330993\r\n    }]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function _mapLoaded(mapProps, map) {\r\n    map.setOptions({\r\n      styles: mapStyle\r\n    });\r\n    renderPolygon(map);\r\n\r\n  }\r\n\r\n  const onMapClicked=(mapProps, map, clickEvent)=>{\r\n      var points = path;\r\n\r\n      var latLng = clickEvent.latLng;\r\n      const lat = latLng.lat();\r\n      const lng = latLng.lng();\r\n      var newPoint = { lat, lng }\r\n      //console.log(newPoint);\r\n      points.push(newPoint);\r\n      setPath(points);\r\n      setPin(newPoint);\r\n\r\n      renderPolygon(map);\r\n      //renderPolyline(map);\r\n\r\n  }\r\n\r\n\r\n  \r\n  const renderPolygon = (map) => {\r\n    const polygon = new props.google.maps.Polygon({\r\n        paths: path,\r\n        strokeColor: \"#FF0000\",\r\n        strokeOpacity: 0.8,\r\n        strokeWeight: 2,\r\n        fillColor: \"#FF0000\",\r\n        fillOpacity: 0.35,\r\n        draggable: true,\r\n  geodesic: true\r\n      });\r\n      polygon.setMap(map);\r\n    \r\n  }\r\n\r\n  const renderPolyline = (map)=>{\r\n    const polyline = new props.google.maps.Polyline({\r\n        path: path,\r\n        geodesic: true,\r\n        strokeColor: \"#FF0000\",\r\n        strokeOpacity: 1.0,\r\n        strokeWeight: 2,\r\n      });\r\n      polyline.setMap(map);\r\n\r\n  }\r\n\r\n  return <div style={props.style}>\r\n    <Map google={props.google}\r\n      initialCenter={{\r\n        lat: -1.3097762253207629,\r\n        lng: 36.81468703330993\r\n      }}\r\n      zoom={16}\r\n      disableDefaultUI\r\n\r\n      className='map'\r\n      style={{\r\n       width: '100%',\r\n      height: '100%',\r\n      }}\r\n      onReady={(mapProps, map) => _mapLoaded(mapProps, map)}\r\n      \r\n      onClick={onMapClicked}\r\n      >\r\n\r\n          {console.log(path)}\r\n        \r\n      \r\n      {renderPolygon()}\r\n{renderPolyline()}\r\n\r\n\r\n\r\n       </Map>\r\n\r\n\r\n\r\n\r\n  </div>\r\n\r\n}\r\n\r\n\r\n\r\nexport default GoogleApiWrapper(\r\n  (props) => ({\r\n    apiKey: (GOOGLE_MAPS_API_KEY),\r\n    LoadingContainer: LoadingContainer\r\n  }\r\n  ))(MapContainer);\r\n\r\n\r\n  /*\r\n  \r\n  <Map google={props.google}\r\n      initialCenter={{\r\n        lat: -1.3097762253207629,\r\n        lng: 36.81468703330993\r\n      }}\r\n      zoom={16}\r\n      disableDefaultUI\r\n\r\n      className='map'\r\n      style={{\r\n       width: '100%',\r\n      height: '100%',\r\n      }}\r\n      onReady={(mapProps, map) => _mapLoaded(mapProps, map)}>\r\n  \r\n      \r\n  onClick={onMapClicked}\r\n\r\n      <Polygon\r\n        fillColor=\"#000000\"\r\n        fillOpacity={0.1}\r\n        paths={[madaraka]}\r\n        //Boundary color\r\n        strokeColor=\"#0000FF\"\r\n        strokeOpacity={1}\r\n        strokeWeight={2}\r\n        onClick={(t, map, coord) => {\r\n\r\n          const { latLng } = coord;\r\n          const lat = latLng.lat();\r\n          const lng = latLng.lng();\r\n          var pin = {\r\n            Lat: lat,\r\n            Lng: lng\r\n\r\n          }\r\n\r\n          //setPin()\r\n\r\n        }}\r\n      />\r\n      <Polygon\r\n        paths={[everythingElse, madaraka]}\r\n        strokeColor=\"#FFC107\"\r\n        strokeOpacity={0.8}\r\n        strokeWeight={0.1}\r\n        fillColor=\"#CCCCCC\"\r\n        fillOpacity={0.1}\r\n      />\r\n    </Map>\r\n  */","C:\\Users\\ian\\Documents\\react-map\\src\\key.js",[],{"ruleId":"33","severity":1,"message":"34","line":2,"column":20,"nodeType":"35","messageId":"36","endLine":2,"endColumn":30},{"ruleId":"33","severity":1,"message":"37","line":2,"column":32,"nodeType":"35","messageId":"36","endLine":2,"endColumn":41},{"ruleId":"33","severity":1,"message":"38","line":3,"column":15,"nodeType":"35","messageId":"36","endLine":3,"endColumn":21},{"ruleId":"33","severity":1,"message":"39","line":3,"column":23,"nodeType":"35","messageId":"36","endLine":3,"endColumn":31},{"ruleId":"33","severity":1,"message":"40","line":3,"column":51,"nodeType":"35","messageId":"36","endLine":3,"endColumn":58},{"ruleId":"33","severity":1,"message":"41","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":9},{"ruleId":"33","severity":1,"message":"42","line":7,"column":5,"nodeType":"35","messageId":"36","endLine":7,"endColumn":13},{"ruleId":"33","severity":1,"message":"43","line":51,"column":5,"nodeType":"35","messageId":"36","endLine":51,"endColumn":19},{"ruleId":"33","severity":1,"message":"44","line":86,"column":7,"nodeType":"35","messageId":"36","endLine":86,"endColumn":20},{"ruleId":"33","severity":1,"message":"45","line":103,"column":12,"nodeType":"35","messageId":"36","endLine":103,"endColumn":15},"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Marker' is defined but never used.","'Polyline' is defined but never used.","'Polygon' is defined but never used.","'$' is defined but never used.","'madaraka' is assigned a value but never used.","'everythingElse' is assigned a value but never used.","'onMarkerClick' is assigned a value but never used.","'pin' is assigned a value but never used."]